{"version":3,"sources":["../server/server.js"],"names":["SourceMapSupport","install","app","use","express","static","bodyParser","json","get","req","res","db","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","console","log","status","message","post","newIssue","body","created","Date","err","Issue","validateIssue","insertOne","result","_id","insertedId","limit","next","MongoClient","connect","connection","listen"],"mappings":";;AAGA;;AAEA;;;;AAGA;;;;AACA;;;;AACA;;AACA;;;;;;AAXA;AACA;AACA;AAIAA,2BAAiBC,OAAjB;;AAOA,MAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQC,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAH,IAAIC,GAAJ,CAAQG,qBAAWC,IAAX,EAAR,E,CAA4B;;AAE5BL,IAAIM,GAAJ,CAAQ,aAAR,EAAuB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjCC,OAAGC,UAAH,CAAc,QAAd,EAAwBC,IAAxB,GAA+BC,OAA/B,GAAyCC,IAAzC,CAA8CC,UAAU;AACpD,cAAMC,WAAW;AACbC,yBAAaF,OAAOG;AADP,SAAjB;AAGAT,YAAIH,IAAJ,CAAS;AACLa,uBAAWH,QADN;AAELI,qBAASL;AAFJ,SAAT;AAIH,KARD,EAQGM,KARH,CAQSC,SAAS;AACdC,gBAAQC,GAAR,CAAYF,KAAZ;AACAb,YAAIgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB;AACjBoB,qBAAU,0BAAyBJ,KAAM;AADxB,SAArB;AAGH,KAbD;AAcH,CAfD;;AAiBArB,IAAI0B,IAAJ,CAAS,aAAT,EAAwB,CAACnB,GAAD,EAAMC,GAAN,KAAc;AAClC,UAAMmB,WAAWpB,IAAIqB,IAArB;AACAD,aAASE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACA,QAAI,CAACH,SAASH,MAAd,EACIG,SAASH,MAAT,GAAkB,KAAlB;;AAEJ,UAAMO,MAAMC,gBAAMC,aAAN,CAAoBN,QAApB,CAAZ;AACA,QAAII,GAAJ,EAAS;AACLvB,YAAIgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB;AACjBoB,qBAAU,oBAAmBM,GAAI;AADhB,SAArB;AAGA;AACH;;AAEDtB,OAAGC,UAAH,CAAc,QAAd,EAAwBwB,SAAxB,CAAkCP,QAAlC,EAA4Cd,IAA5C,CAAiDsB,UAC7C1B,GAAGC,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B;AACzByB,aAAKD,OAAOE;AADa,KAA7B,EAEGC,KAFH,CAES,CAFT,EAEYC,IAFZ,EADJ,EAIE1B,IAJF,CAIOc,YAAY;AACfnB,YAAIH,IAAJ,CAASsB,QAAT;AACH,KAND,EAMGP,KANH,CAMSC,SAAS;AACdC,gBAAQC,GAAR,CAAYF,KAAZ;AACAb,YAAIgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB;AACjBoB,qBAAU,0BAAyBJ,KAAM;AADxB,SAArB;AAGH,KAXD;AAYH,CA1BD;;AA4BA,IAAIZ,EAAJ;AACA+B,qBAAYC,OAAZ,CAAoB,kCAApB,EAAwD5B,IAAxD,CAA6D6B,cAAc;AACvEjC,SAAKiC,UAAL;AACA1C,QAAI2C,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACnBrB,gBAAQC,GAAR,CAAY,0BAAZ;AACH,KAFD;AAGH,CALD,EAKGH,KALH,CAKSC,SAAS;AACdC,YAAQC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACH,CAPD","file":"server.js","sourcesContent":["// Comiplation only takes care of the new syntax of ES2015 \n// but does not provide new objects and methods that are part of the ES2015 standard library\n// To enable these objects and methods as in client-side code, bable-polyfill is included.\nimport 'babel-polyfill';\n\nimport SourceMapSupport from 'source-map-support';\nSourceMapSupport.install();\n\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\nimport Issue from './issue.js';\n\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json()); // using JSON parser from body-parser\n\napp.get('/api/issues', (req, res) => {\n    db.collection('issues').find().toArray().then(issues => {\n        const metadata = {\n            total_count: issues.length\n        };\n        res.json({\n            _metadata: metadata,\n            records: issues\n        })\n    }).catch(error => {\n        console.log(error);\n        res.status(500).json({\n            message: `Internal Server Error: ${error}`\n        });\n    });\n});\n\napp.post('/api/issues', (req, res) => {\n    const newIssue = req.body;\n    newIssue.created = new Date();\n    if (!newIssue.status)\n        newIssue.status = 'New';\n\n    const err = Issue.validateIssue(newIssue);\n    if (err) {\n        res.status(422).json({\n            message: `Invalid request: ${err}`\n        });\n        return;\n    }\n\n    db.collection('issues').insertOne(newIssue).then(result =>\n        db.collection('issues').find({\n            _id: result.insertedId\n        }).limit(1).next()\n    ).then(newIssue => {\n        res.json(newIssue);\n    }).catch(error => {\n        console.log(error);\n        res.status(500).json({\n            message: `Internal Server Error: ${error}`\n        });\n    });\n});\n\nlet db;\nMongoClient.connect('mongodb://localhost/issuetracker').then(connection => {\n    db = connection;\n    app.listen(3000, () => {\n        console.log('App started on port 3000');\n    });\n}).catch(error => {\n    console.log('ERROR:', error);\n});"]}