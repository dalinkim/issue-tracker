{"version":3,"sources":["../server/server.js"],"names":["SourceMapSupport","install","app","use","express","static","bodyParser","json","db","get","req","res","filter","query","status","effort_lte","effort_gte","effort","$lte","parseInt","$gte","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","console","log","message","post","newIssue","body","created","Date","err","Issue","validateIssue","insertOne","cleanupIssue","result","_id","insertedId","limit","next","savedIssue","issueId","ObjectId","params","id","issue","sendFile","path","resolve","MongoClient","connect","connection","listen"],"mappings":";;AAGA;;;;AAEA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAPAA,2BAAiBC,OAAjB,G,CAJA;AACA;AACA;;;AAWA,MAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQC,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAH,IAAIC,GAAJ,CAAQG,qBAAWC,IAAX,EAAR;;AAEA,IAAIC,EAAJ;;AAEAN,IAAIO,GAAJ,CAAQ,aAAR,EAAuB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACnC,QAAMC,SAAS,EAAf;AACA,MAAIF,IAAIG,KAAJ,CAAUC,MAAd,EAAsBF,OAAOE,MAAP,GAAgBJ,IAAIG,KAAJ,CAAUC,MAA1B;AACtB,MAAIJ,IAAIG,KAAJ,CAAUE,UAAV,IAAwBL,IAAIG,KAAJ,CAAUG,UAAtC,EAAkDJ,OAAOK,MAAP,GAAgB,EAAhB;AAClD,MAAIP,IAAIG,KAAJ,CAAUE,UAAd,EAA0BH,OAAOK,MAAP,CAAcC,IAAd,GAAqBC,SAAST,IAAIG,KAAJ,CAAUE,UAAnB,EAA+B,EAA/B,CAArB;AAC1B,MAAIL,IAAIG,KAAJ,CAAUG,UAAd,EAA0BJ,OAAOK,MAAP,CAAcG,IAAd,GAAqBD,SAAST,IAAIG,KAAJ,CAAUG,UAAnB,EAA+B,EAA/B,CAArB;;AAE1BR,KAAGa,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6BV,MAA7B,EAAqCW,OAArC,GACCC,IADD,CACMC,UAAU;AACd,UAAMC,WAAW,EAAEC,aAAaF,OAAOG,MAAtB,EAAjB;AACAjB,QAAIJ,IAAJ,CAAS,EAAEsB,WAAWH,QAAb,EAAuBI,SAASL,MAAhC,EAAT;AACD,GAJD,EAKCM,KALD,CAKOC,SAAS;AACdC,YAAQC,GAAR,CAAYF,KAAZ;AACArB,QAAIG,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,EAAE4B,SAAU,0BAAyBH,KAAM,EAA3C,EAArB;AACD,GARD;AASD,CAhBD;;AAkBA9B,IAAIkC,IAAJ,CAAS,aAAT,EAAwB,CAAC1B,GAAD,EAAMC,GAAN,KAAc;AACpC,QAAM0B,WAAW3B,IAAI4B,IAArB;AACAD,WAASE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACA,MAAI,CAACH,SAASvB,MAAd,EAAsB;AACpBuB,aAASvB,MAAT,GAAkB,KAAlB;AACD;;AAED,QAAM2B,MAAMC,gBAAMC,aAAN,CAAoBN,QAApB,CAAZ;AACA,MAAII,GAAJ,EAAS;AACP9B,QAAIG,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,EAAE4B,SAAU,oBAAmBM,GAAI,EAAnC,EAArB;AACA;AACD;;AAEDjC,KAAGa,UAAH,CAAc,QAAd,EAAwBuB,SAAxB,CAAkCF,gBAAMG,YAAN,CAAmBR,QAAnB,CAAlC,EAAgEb,IAAhE,CAAqEsB,UACnEtC,GAAGa,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B,EAAEyB,KAAKD,OAAOE,UAAd,EAA7B,EAAyDC,KAAzD,CAA+D,CAA/D,EACCC,IADD,EADF,EAIC1B,IAJD,CAIM2B,cAAc;AAClBxC,QAAIJ,IAAJ,CAAS4C,UAAT;AACD,GAND,EAOCpB,KAPD,CAOOC,SAAS;AACdC,YAAQC,GAAR,CAAYF,KAAZ;AACArB,QAAIG,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,EAAE4B,SAAU,0BAAyBH,KAAM,EAA3C,EAArB;AACD,GAVD;AAWD,CAxBD;;AA0BA;AACA9B,IAAIO,GAAJ,CAAQ,iBAAR,EAA2B,CAACC,GAAD,EAAMC,GAAN,KAAc;AACvC,MAAIyC,OAAJ;AACA,MAAI;AACFA,cAAU,IAAIC,iBAAJ,CAAa3C,IAAI4C,MAAJ,CAAWC,EAAxB,CAAV;AACD,GAFD,CAEE,OAAOvB,KAAP,EAAc;AACdrB,QAAIG,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,EAAE4B,SAAU,4BAA2BH,KAAM,EAA7C,EAArB;AACA;AACD;;AAEDxB,KAAGa,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B,EAAEyB,KAAKK,OAAP,EAA7B,EAA+CH,KAA/C,CAAqD,CAArD,EACCC,IADD,GAEC1B,IAFD,CAEMgC,SAAS;AACb,QAAI,CAACA,KAAL,EAAY;AACV7C,UAAIG,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,EAAE4B,SAAU,kBAAiBiB,OAAQ,EAArC,EAArB;AACD,KAFD,MAEO;AACLzC,UAAIJ,IAAJ,CAASiD,KAAT;AACD;AACF,GARD,EASCzB,KATD,CASOC,SAAS;AACdC,YAAQC,GAAR,CAAYF,KAAZ;AACArB,QAAIG,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,EAAE4B,SAAU,0BAAyBH,KAAM,EAA3C,EAArB;AACD,GAZD;AAaD,CAtBD;;AAwBA;AACA;AACA;AACA9B,IAAIO,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzBA,MAAI8C,QAAJ,CAAaC,eAAKC,OAAL,CAAa,mBAAb,CAAb;AACD,CAFD;;AAIAC,qBAAYC,OAAZ,CAAoB,kCAApB,EAAwDrC,IAAxD,CAA6DsC,cAAc;AACzEtD,OAAKsD,UAAL;AACA5D,MAAI6D,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACrB9B,YAAQC,GAAR,CAAY,0BAAZ;AACD,GAFD;AAGD,CALD,EAKGH,KALH,CAKSC,SAAS;AAChBC,UAAQC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACD,CAPD","file":"server.js","sourcesContent":["// Comiplation only takes care of the new syntax of ES2015\n// but does not provide new objects and methods that are part of the ES2015 standard library\n// To enable these objects and methods as in client-side code, bable-polyfill is included.\nimport SourceMapSupport from 'source-map-support';\nSourceMapSupport.install();\nimport 'babel-polyfill';\n\nimport path from 'path';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport Issue from './issue.js';\n\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\nlet db;\n\napp.get('/api/issues', (req, res) => {\n  const filter = {};\n  if (req.query.status) filter.status = req.query.status;\n  if (req.query.effort_lte || req.query.effort_gte) filter.effort = {};\n  if (req.query.effort_lte) filter.effort.$lte = parseInt(req.query.effort_lte, 10);\n  if (req.query.effort_gte) filter.effort.$gte = parseInt(req.query.effort_gte, 10);\n\n  db.collection('issues').find(filter).toArray()\n  .then(issues => {\n    const metadata = { total_count: issues.length };\n    res.json({ _metadata: metadata, records: issues });\n  })\n  .catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  });\n});\n\napp.post('/api/issues', (req, res) => {\n  const newIssue = req.body;\n  newIssue.created = new Date();\n  if (!newIssue.status) {\n    newIssue.status = 'New';\n  }\n\n  const err = Issue.validateIssue(newIssue);\n  if (err) {\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n\n  db.collection('issues').insertOne(Issue.cleanupIssue(newIssue)).then(result =>\n    db.collection('issues').find({ _id: result.insertedId }).limit(1)\n    .next()\n  )\n  .then(savedIssue => {\n    res.json(savedIssue);\n  })\n  .catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  });\n});\n\n// new Express route for Get API\napp.get('/api/issues/:id', (req, res) => {\n  let issueId;\n  try {\n    issueId = new ObjectId(req.params.id);\n  } catch (error) {\n    res.status(422).json({ message: `Invalid issue ID format: ${error}` });\n    return;\n  }\n\n  db.collection('issues').find({ _id: issueId }).limit(1)\n  .next()\n  .then(issue => {\n    if (!issue) {\n      res.status(404).json({ message: `No such issue: ${issueId}` });\n    } else {\n      res.json(issue);\n    }\n  })\n  .catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  });\n});\n\n// new Express route has to be placed after all the other routes\n// so that it gets resolved only if none of the previous routes match\n// resolve is also used because sendFile accepts only absolute paths.\napp.get('*', (req, res) => {\n  res.sendFile(path.resolve('static/index.html'));\n});\n\nMongoClient.connect('mongodb://localhost/issuetracker').then(connection => {\n  db = connection;\n  app.listen(3000, () => {\n    console.log('App started on port 3000');\n  });\n}).catch(error => {\n  console.log('ERROR:', error);\n});\n"]}